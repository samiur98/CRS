;Rohan Ramani, Shah Samiur Rahman, Connor Boulais

#lang typed/racket

(require typed/rackunit)

(define EPSILON 1e-05)

;-------------------------------------------------------------------------------------------
; Data Definitions:
;   ExprC, FunDefC

(define-type ExprC (U NumC IdC AppC BinOp Ifleq0))
(struct NumC ([n : Real]) #:transparent)
(struct IdC ([s : Symbol]) #:transparent)
(struct AppC ([fun : Symbol] [arg : ExprC]) #:transparent)
(struct BinOp ([l : ExprC] [r : ExprC] [operator : Symbol]) #:transparent)
(struct Ifleq0 ([test : ExprC] [then : ExprC] [else : ExprC]) #:transparent)

(struct FunDefC ([name : Symbol] [arg : Symbol] [body : ExprC]) #:transparent)

;-------------------------------------------------------------------------------------------
;Parse

;;determines if an identifier is valid, used in parse
(define (valid-idc [id : Symbol]) : Boolean
  (match id
    ['+ #f]
    ['- #f]
    ['/ #f]
    ['* #f]
    ['ifleq0 #f]
    ['fundef #f]
    [else #t]))

(check-equal? (valid-idc 'x) #t)
(check-equal? (valid-idc '+) #f)
(check-equal? (valid-idc '/) #f)
(check-equal? (valid-idc '*) #f)
(check-equal? (valid-idc '-) #f)
(check-equal? (valid-idc 'ifleq0) #f)
(check-equal? (valid-idc 'fundef) #f)

;;maps an s-expression directly to an ExprC
(define (parse [s : Sexp]) : ExprC
 (match s
   [(? real? a) (NumC a)]
   [(? symbol? id) (cond 
                         [(valid-idc id) (IdC id)]
                         [else (error 'parse "DXUQ invalid identifier in parse")])]
   [(list '+ a b) (BinOp (parse a) (parse b) '+)]
   [(list '- a b) (BinOp (parse a) (BinOp (parse -1) (parse b) '*) '+)]
   [(list '* a b) (BinOp (parse a) (parse b) '*)]
   [(list '/ a b) (cond
                    [(equal? b '0) (error 'parse "DXUQ cannot divide by zero")]
                    [else (BinOp (parse a) (parse b) '/)])]
   [(list '- a) (BinOp (parse -1) (parse a) '*)]
   [(list 'ifleq0 test then else) (Ifleq0 (parse test) (parse then) (parse else))] 
   [(list (? symbol? n) arg) (AppC n (parse arg))]
   [else (error 'parse "DXUQ invalid input to parse")]))

;(BinOp (parse a) (parse b) '/)

(check-equal? (parse '{+ 1 2}) (BinOp (NumC 1) (NumC 2) '+))
(check-equal? (parse '{* 1 2}) (BinOp (NumC 1) (NumC 2) '*))
(check-equal? (parse '{- 5 2}) (BinOp (NumC 5) (BinOp (NumC -1) (NumC 2) '*) '+))
(check-equal? (parse '{- 9}) (BinOp (NumC -1) (NumC 9) '*))
(check-equal? (parse '{/ 10 2}) (BinOp (NumC 10) (NumC 2) '/))
(check-equal? (parse '{* {- 1} 2}) (BinOp (BinOp (NumC -1) (NumC 1) '*) (NumC 2) '*))
(check-equal? (parse '{- 1 {+ 5 6}}) (BinOp (NumC 1) (BinOp (NumC -1) (BinOp (NumC 5) (NumC 6) '+) '*) '+))
(check-equal? (parse '{func {+ 1 5}})(AppC 'func (BinOp (NumC 1) (NumC 5) '+)))
(check-equal? (parse '{ifleq0 0 1 2}) (Ifleq0 (NumC 0) (NumC 1) (NumC 2)))
(check-equal? (parse '{ifleq0 8 8 8}) (Ifleq0 (NumC 8) (NumC 8) (NumC 8)))
(check-equal? (parse '{ifleq0 1 {+ 2 2} {- 5 2}})
            (Ifleq0 (NumC 1) (BinOp (NumC 2) (NumC 2) '+) (BinOp (NumC 5)
               (BinOp (NumC -1) (NumC 2) '*) '+)))
(check-exn (regexp (regexp-quote "DXUQ invalid identifier in parse"))
          (lambda () (parse '{+ / 3})))
(check-exn (regexp (regexp-quote "DXUQ invalid input to parse"))
          (lambda () (parse "hello")))
(check-exn (regexp (regexp-quote "DXUQ cannot divide by zero"))
          (lambda () (parse '{/ 8 0})))

;;parses a function definition, from an s-expression, into a FunDefC
(define (parse-fundef [s : Sexp]) : FunDefC
 (match s
   [(list 'fundef (list (? symbol? name) (? symbol? arg)) body)
    (FunDefC name arg (parse body))]
   [else (error 'parse-fundef "DXUQ invalid input to parse-fundef")])) ;Not killing the call stack

(check-equal? (parse-fundef '{fundef {myfunc x} {+ 1 x}})
            (FunDefC 'myfunc 'x (BinOp (NumC 1) (IdC 'x) '+)))
(check-exn (regexp (regexp-quote "DXUQ invalid input to parse-fundef"))
          (lambda () (parse-fundef '(+ 1 4))))



;;parses a list a functions, given as an s-expression
(define (parse-prog [s : Sexp]) : (Listof FunDefC)
 (match s
   [(list funs ...) (map parse-fundef funs)]))

(check-equal? (parse-prog '{})'())
(check-equal? (parse-prog '{{fundef {myfunc x} {+ 1 x}}})
            (list (FunDefC 'myfunc 'x (BinOp (NumC 1) (IdC 'x) '+))))

;;-----------------------------------------------------------------------------------------
; substitute

;;substitutes an expression for a symbol in another expression
(define (subst [what : ExprC] [for : Symbol] [in : ExprC]) : ExprC
 (match in
   [(NumC n) in]
   [(IdC s) (cond
              [(symbol=? s for) what]
              [else (error 'subst "DXUQ undefined identifier")])]
   [(AppC f arg) (AppC f (subst what for arg))]
   [(BinOp l r '+) (BinOp (subst what for l)
                       (subst what for r) '+)]
   [(BinOp l r '*) (BinOp (subst what for l)
                       (subst what for r) '*)]
   [(BinOp l r '/) (BinOp (subst what for l)
                       (subst what for r) '/)]
   [(Ifleq0 test then else) (Ifleq0
                            (subst what for test)
                            (subst what for then)
                            (subst what for else))]))


(check-equal? (subst (NumC 4) 'x (BinOp (IdC 'x) (NumC 1) '+))
            (BinOp (NumC 4) (NumC 1) '+))
(check-equal? (subst (NumC 4) 'x (BinOp (IdC 'x) (NumC 2) '/))
            (BinOp (NumC 4) (NumC 2) '/))
(check-equal? (subst (NumC 4) 'x (AppC 'func (BinOp (IdC 'x) (NumC 10) '+)))
            (AppC 'func (BinOp (NumC 4) (NumC 10) '+)))
(check-exn (regexp (regexp-quote "DXUQ undefined identifier"))
          (lambda () (subst (NumC 4) 'x (BinOp (IdC 'z) (NumC 1) '+))))

;;-----------------------------------------------------------------------------------------
; get-fundef

;;gets a function definition from a list of FunDefC's, given its name
(define (get-fundef [n : Symbol] [fds : (Listof FunDefC)]) : FunDefC
   (cond
     [(empty? fds)
      (error 'get-fundef "DXUQ reference to undefined function")]
     [(cons? fds)
      (cond
        [(equal? n (FunDefC-name (first fds))) (first fds)]
        [else (get-fundef n (rest fds))])]))

(check-equal? (get-fundef 'func1 (list (FunDefC 'func2 'x (NumC 4))
                                      (FunDefC 'func1 'x (NumC 5))))
            (FunDefC 'func1 'x (NumC 5)))
(check-exn (regexp (regexp-quote "get-fundef: DXUQ reference to undefined function"))
          (lambda () (get-fundef 'func '())))


;;-----------------------------------------------------------------------------------------
; interp

;;maps a symbol to the arithmetic function it represents
(define (symbol->arith [s : Symbol]) : (-> Real Real Real)
  (match s
    ['+ +]
    ['- -]
    ['* *]
    ['/ /]
    [else (error 'symbol->arith "DXUQ invalid input")]))

(check-equal? (symbol->arith '+) +)
(check-equal? (symbol->arith '-) -)
(check-equal? (symbol->arith '/) /)
(check-equal? (symbol->arith '*) *)
(check-exn (regexp (regexp-quote "DXUQ invalid input"))
          (lambda () (symbol->arith '%)))

;;evaluates an ExprC to a value
(define (interp [a : ExprC] [fds : (Listof FunDefC)]) : Real
   (match a
     [(NumC n) n]
     [(BinOp l r (? symbol? s)) ((symbol->arith s) (interp l fds) (interp r fds))]
     [(Ifleq0 test then e)
        (cond
          [(<= (interp test fds) 0) (interp then fds)]
          [else (interp e fds)])]
     [(AppC f arg) (define fd (get-fundef f fds))
                 (interp (subst (NumC (interp arg fds)) (FunDefC-arg fd) (FunDefC-body fd)) fds)]))


(check-= (interp (BinOp (NumC 10) (NumC 2) '/) '()) 5 EPSILON)
(check-= (interp (BinOp (NumC 4) (NumC 5) '+) '()) 9 EPSILON)
(check-= (interp (BinOp (NumC 4) (NumC 5) '*) '()) 20 EPSILON)
(check-= (interp (BinOp (BinOp (NumC 3) (NumC 2) '*) (NumC 5) '+) '()) 11 EPSILON)
(check-= (interp (AppC 'func (NumC 10))
               (list (FunDefC 'func 'x (BinOp (IdC 'x) (NumC 1) '+))))
         11 EPSILON)
(check-= (interp (Ifleq0 (NumC 0) (NumC 1) (NumC 2)) '()) 1 EPSILON)
(check-= (interp (Ifleq0 (NumC -1) (NumC 1) (NumC 2)) '()) 1 EPSILON)
(check-= (interp (Ifleq0 (NumC 1) (NumC 1) (NumC 2)) '()) 2 EPSILON)


;;interprets the 'main' function, given a list of functions
(define (interp-fns [funs : (Listof FunDefC)]) : Real
 (interp (AppC 'main (NumC 0)) funs))

(check-equal? (interp-fns
              (list (FunDefC 'func 'x (NumC 4)) (FunDefC 'main 'init (NumC 5))))5)
(check-equal? (interp-fns
      (parse-prog '{{fundef {f x} {+ x 5}}
                    {fundef {main init} {f 1}}})) 6)
(check-equal? (interp-fns
       (parse-prog '{{fundef {f var} {* var 2}}
                     {fundef {main init} {+ {f 4} {f 5}}}}))18)


;;---------------------------------------------------------------------------------------------
; top-interp

;;interprets an S-expression
(define (top-interp [fun-sexps : Sexp]) : Real
 (interp-fns (parse-prog fun-sexps)))


(check-equal? (top-interp '{{fundef {f x} {+ x 2}}
                          {fundef {main init} {f 1}}}) 3)
(check-equal? (top-interp '{{fundef {f p} {* {- 10 5} p}}
                          {fundef {main init} {+ {f 2} {f 3}}}})25)
(check-equal? (top-interp '{{fundef {u x} {- x}}
                          {fundef {f x} {* x 10}}
                          {fundef {main init} {+ {f 6} {u 4}}}})56)
(check-equal? (top-interp '{{fundef {main init} {ifleq0 {* 3 1} 3 {+ 2 9}}}}) 11)


;while evaluating (top-interp (quote ((fundef (main init) (f 9)) (fundef (f x) (g 3 x)) (fundef (g a b) (+ a b))))):
;  parse: DXUQ invalid input to parse
;Saving submission with errors.

;(top-interp (quote ((fundef (main init) (f 9)) (fundef (f x) (g 3 x)) (fundef (g a b) (+ a b)))))
