#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.8 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 59 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 157 157 250 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 157 157 250 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 157 157 250 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 100 149 237 0 0 0 -1 -1 0
42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 50 205 50 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 152 251 152 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1
          0 2456 0 29 3 18 #"#lang typed/racket"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 7 #"require"
0 0 25 3 1 #" "
0 0 14 3 14 #"typed/rackunit"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 7 #"EPSILON"
0 0 25 3 1 #" "
0 0 22 3 5 #"1e-05"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 50 #";Division BY ZERO AND DXUQ ERROR CHECK IS COMPLETE"
0 0 25 29 1 #"\n"
0 0 17 3 92
(4
 #";-------------------------------------------------------------------"
 #"------------------------"
) 0 0 25 29 1 #"\n"
0 0 17 3 19 #"; Data Definitions:"
0 0 25 29 1 #"\n"
0 0 17 3 18 #";   ExprC, FunDefC"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 25 3 2 #" ("
0 0 14 3 1 #"U"
0 0 25 3 1 #" "
0 0 14 3 4 #"NumC"
0 0 25 3 1 #" "
0 0 14 3 3 #"IdC"
0 0 25 3 1 #" "
0 0 14 3 4 #"AppC"
0 0 25 3 1 #" "
0 0 14 3 5 #"BinOp"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 4 #"NumC"
0 0 25 3 3 #" (["
0 0 14 3 1 #"n"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 4 #"Real"
0 0 25 3 3 #"]) "
0 0 24 3 13 #"#:transparent"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 3 #"IdC"
0 0 25 3 3 #" (["
0 0 14 3 1 #"s"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 25 3 3 #"]) "
0 0 24 3 13 #"#:transparent"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 4 #"AppC"
0 0 25 3 3 #" (["
0 0 14 3 3 #"fun"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 25 3 3 #"] ["
0 0 14 3 4 #"args"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 25 3 4 #")]) "
0 0 24 3 13 #"#:transparent"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 5 #"BinOp"
0 0 25 3 3 #" (["
0 0 14 3 1 #"l"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 25 3 3 #"] ["
0 0 14 3 1 #"r"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 25 3 3 #"] ["
0 0 14 3 8 #"operator"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 25 3 2 #"])"
0 0 24 3 13 #"#:transparent"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 17 3 52 #";BinOp new struct which replaces the PlusC and MultC"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 7 #"FunDefC"
0 0 25 3 3 #" (["
0 0 14 3 4 #"name"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 25 3 3 #"] ["
0 0 14 3 4 #"args"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 25 3 4 #")] ["
0 0 14 3 4 #"body"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 25 3 3 #"]) "
0 0 24 3 13 #"#:transparent"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 92 4 0 0 25 29 1 #"\n"
0 0 17 3 7 #"; Parse"
0 0 25 29 1 #"\n"
0 0 17 3 27 #";Parse mod is the new parse"
0 0 25 29 1 #"\n"
0 0 17 3 1 #";"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 9 #"parse-mod"
0 0 25 3 2 #" ["
0 0 14 3 1 #"s"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 4 #"Sexp"
0 0 25 3 3 #"]) "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 25 3 1 #" "
0 0 14 3 1 #"s"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 25 3 1 #" "
0 0 14 3 5 #"real?"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 3 #") ("
0 0 14 3 4 #"NumC"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 25 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 25 3 1 #" "
0 0 14 3 2 #"id"
0 0 25 3 3 #") ("
0 0 14 3 3 #"IdC"
0 0 25 3 1 #" "
0 0 14 3 2 #"id"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 1 #" "
0 0 14 3 1 #"b"
0 0 25 3 3 #") ("
0 0 14 3 5 #"BinOp"
0 0 25 3 2 #" ("
0 0 14 3 9 #"parse-mod"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 3 #") ("
0 0 14 3 9 #"parse-mod"
0 0 25 3 1 #" "
0 0 14 3 1 #"b"
0 0 25 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 1 #"+"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"-"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 1 #" "
0 0 14 3 1 #"b"
0 0 25 3 3 #") ("
0 0 14 3 5 #"BinOp"
0 0 25 3 2 #" ("
0 0 14 3 9 #"parse-mod"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 3 #") ("
0 0 14 3 5 #"BinOp"
0 0 25 3 2 #" ("
0 0 14 3 9 #"parse-mod"
0 0 25 3 1 #" "
0 0 22 3 2 #"-1"
0 0 25 3 3 #") ("
0 0 14 3 9 #"parse-mod"
0 0 25 3 1 #" "
0 0 14 3 1 #"b"
0 0 25 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 1 #"*"
0 0 25 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 1 #"+"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"*"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 1 #" "
0 0 14 3 1 #"b"
0 0 25 3 3 #") ("
0 0 14 3 5 #"BinOp"
0 0 25 3 2 #" ("
0 0 14 3 9 #"parse-mod"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 3 #") ("
0 0 14 3 9 #"parse-mod"
0 0 25 3 1 #" "
0 0 14 3 1 #"b"
0 0 25 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 1 #"*"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"/"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 1 #" "
0 0 14 3 1 #"b"
0 0 25 3 3 #") ("
0 0 14 3 5 #"BinOp"
0 0 25 3 2 #" ("
0 0 14 3 9 #"parse-mod"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 3 #") ("
0 0 14 3 9 #"parse-mod"
0 0 25 3 1 #" "
0 0 14 3 1 #"b"
0 0 25 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 1 #"/"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"-"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 3 #") ("
0 0 14 3 5 #"BinOp"
0 0 25 3 2 #" ("
0 0 14 3 9 #"parse-mod"
0 0 25 3 1 #" "
0 0 22 3 2 #"-1"
0 0 25 3 3 #") ("
0 0 14 3 9 #"parse-mod"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 1 #"*"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 1 #"?"
0 0 25 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 2 #") "
0 0 14 3 4 #"args"
0 0 25 3 1 #" "
0 0 14 3 3 #"..."
0 0 25 3 3 #") ("
0 0 14 3 4 #"AppC"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 2 #" ("
0 0 14 3 3 #"map"
0 0 25 3 1 #" "
0 0 14 3 9 #"parse-mod"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cast"
0 0 25 3 1 #" "
0 0 14 3 4 #"args"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 4 #"Sexp"
0 0 25 3 5 #"))))]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 9 #"parse-mod"
0 0 25 3 1 #" "
0 0 19 3 13 #"\"DXUQ invalid"
0 0 19 3 1 #" "
0 0 19 3 5 #"input"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 7 #" parse\""
0 0 25 3 4 #")]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 25 3 2 #" ("
0 0 14 3 9 #"parse-mod"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"{"
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 4 #"}) ("
0 0 14 3 5 #"BinOp"
0 0 25 3 2 #" ("
0 0 14 3 4 #"NumC"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 3 #") ("
0 0 14 3 4 #"NumC"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 1 #"+"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 25 3 2 #" ("
0 0 14 3 9 #"parse-mod"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"{"
0 0 14 3 1 #"*"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 4 #"}) ("
0 0 14 3 5 #"BinOp"
0 0 25 3 2 #" ("
0 0 14 3 4 #"NumC"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 3 #") ("
0 0 14 3 4 #"NumC"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 1 #"*"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 25 3 2 #" ("
0 0 14 3 9 #"parse-mod"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"{"
0 0 14 3 1 #"-"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 4 #"}) ("
0 0 14 3 5 #"BinOp"
0 0 25 3 2 #" ("
0 0 14 3 4 #"NumC"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 3 #") ("
0 0 14 3 5 #"BinOp"
0 0 25 3 2 #" ("
0 0 14 3 4 #"NumC"
0 0 25 3 1 #" "
0 0 22 3 2 #"-1"
0 0 25 3 3 #") ("
0 0 14 3 4 #"NumC"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 1 #"*"
0 0 25 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 1 #"+"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 25 3 2 #" ("
0 0 14 3 9 #"parse-mod"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"{"
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 4 3 1 #"9"
0 0 4 3 4 #"}) ("
0 0 4 3 5 #"BinOp"
0 0 4 3 2 #" ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 2 #"-1"
0 0 4 3 3 #") ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 1 #"9"
0 0 4 3 2 #") "
0 0 4 3 1 #"'"
0 0 4 3 1 #"*"
0 0 4 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 12 #"check-equal?"
0 0 4 3 2 #" ("
0 0 4 3 9 #"parse-mod"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 1 #"{"
0 0 4 3 1 #"/"
0 0 4 3 1 #" "
0 0 4 3 2 #"10"
0 0 4 3 1 #" "
0 0 4 3 1 #"2"
0 0 4 3 4 #"}) ("
0 0 4 3 5 #"BinOp"
0 0 4 3 2 #" ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 2 #"10"
0 0 4 3 3 #") ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 1 #"2"
0 0 4 3 2 #") "
0 0 4 3 1 #"'"
0 0 4 3 1 #"/"
0 0 4 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 12 #"check-equal?"
0 0 4 3 2 #" ("
0 0 4 3 9 #"parse-mod"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 1 #"{"
0 0 4 3 1 #"/"
0 0 4 3 1 #" "
0 0 4 3 1 #"8"
0 0 4 3 1 #" "
0 0 4 3 1 #"0"
0 0 4 3 4 #"}) ("
0 0 4 3 5 #"BinOp"
0 0 4 3 2 #" ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 1 #"8"
0 0 4 3 3 #") ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 1 #"0"
0 0 4 3 2 #") "
0 0 4 3 1 #"'"
0 0 4 3 1 #"/"
0 0 4 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 43 #";;maps an s-expression directly to an ExprC"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 12 #"check-equal?"
0 0 4 3 2 #" ("
0 0 4 3 9 #"parse-mod"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 1 #"{"
0 0 4 3 1 #"+"
0 0 4 3 1 #" "
0 0 4 3 1 #"1"
0 0 4 3 1 #" "
0 0 4 3 1 #"2"
0 0 4 3 2 #"})"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"              ("
0 0 4 3 5 #"BinOp"
0 0 4 3 2 #" ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 1 #"1"
0 0 4 3 3 #") ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 1 #"2"
0 0 4 3 2 #") "
0 0 4 3 1 #"'"
0 0 4 3 1 #"+"
0 0 4 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 12 #"check-equal?"
0 0 4 3 2 #" ("
0 0 4 3 9 #"parse-mod"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 1 #"{"
0 0 4 3 1 #"+"
0 0 4 3 1 #" "
0 0 4 3 1 #"1"
0 0 4 3 1 #" "
0 0 4 3 3 #"var"
0 0 4 3 2 #"})"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"              ("
0 0 4 3 5 #"BinOp"
0 0 4 3 2 #" ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 1 #"1"
0 0 4 3 3 #") ("
0 0 4 3 3 #"IdC"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 3 #"var"
0 0 4 3 2 #") "
0 0 4 3 1 #"'"
0 0 4 3 1 #"+"
0 0 4 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 12 #"check-equal?"
0 0 4 3 2 #" ("
0 0 4 3 9 #"parse-mod"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 1 #"{"
0 0 4 3 1 #"*"
0 0 4 3 2 #" {"
0 0 4 3 1 #"-"
0 0 4 3 1 #" "
0 0 4 3 1 #"1"
0 0 4 3 2 #"} "
0 0 4 3 1 #"2"
0 0 4 3 2 #"})"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"              ("
0 0 4 3 5 #"BinOp"
0 0 4 3 2 #" ("
0 0 4 3 5 #"BinOp"
0 0 4 3 2 #" ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 2 #"-1"
0 0 4 3 3 #") ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 1 #"1"
0 0 4 3 2 #") "
0 0 4 3 1 #"'"
0 0 4 3 1 #"*"
0 0 4 3 3 #") ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 1 #"2"
0 0 4 3 2 #") "
0 0 4 3 1 #"'"
0 0 4 3 1 #"*"
0 0 4 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 12 #"check-equal?"
0 0 4 3 2 #" ("
0 0 4 3 9 #"parse-mod"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 1 #"{"
0 0 4 3 1 #"-"
0 0 4 3 1 #" "
0 0 4 3 1 #"1"
0 0 4 3 2 #" {"
0 0 4 3 1 #"+"
0 0 4 3 1 #" "
0 0 4 3 1 #"5"
0 0 4 3 1 #" "
0 0 4 3 1 #"6"
0 0 4 3 3 #"}})"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"              ("
0 0 4 3 5 #"BinOp"
0 0 4 3 2 #" ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 1 #"1"
0 0 4 3 3 #") ("
0 0 4 3 5 #"BinOp"
0 0 4 3 2 #" ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 2 #"-1"
0 0 4 3 3 #") ("
0 0 4 3 5 #"BinOp"
0 0 4 3 2 #" ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 1 #"5"
0 0 4 3 3 #") ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 1 #"6"
0 0 4 3 2 #") "
0 0 4 3 1 #"'"
0 0 4 3 1 #"+"
0 0 4 3 2 #") "
0 0 4 3 1 #"'"
0 0 4 3 1 #"*"
0 0 4 3 2 #") "
0 0 4 3 1 #"'"
0 0 4 3 1 #"+"
0 0 4 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 12 #"check-equal?"
0 0 4 3 2 #" ("
0 0 4 3 9 #"parse-mod"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 1 #"{"
0 0 4 3 4 #"func"
0 0 4 3 2 #" {"
0 0 4 3 1 #"+"
0 0 4 3 1 #" "
0 0 4 3 1 #"1"
0 0 4 3 1 #" "
0 0 4 3 1 #"5"
0 0 4 3 3 #"}})"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"              ("
0 0 4 3 4 #"AppC"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 4 #"func"
0 0 4 3 2 #" ("
0 0 4 3 4 #"list"
0 0 4 3 1 #"("
0 0 4 3 5 #"BinOp"
0 0 4 3 2 #" ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 1 #"1"
0 0 4 3 3 #") ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 1 #"5"
0 0 4 3 2 #") "
0 0 4 3 1 #"'"
0 0 4 3 1 #"+"
0 0 4 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 12 #"check-equal?"
0 0 4 3 2 #" ("
0 0 4 3 9 #"parse-mod"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 1 #"{"
0 0 4 3 4 #"func"
0 0 4 3 2 #"})"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"              ("
0 0 4 3 4 #"AppC"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 4 #"func"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 4 #"()))"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 9 #"check-exn"
0 0 4 3 2 #" ("
0 0 4 3 6 #"regexp"
0 0 4 3 2 #" ("
0 0 4 3 12 #"regexp-quote"
0 0 4 3 1 #" "
0 0 4 3 13 #"\"DXUQ invalid"
0 0 4 3 1 #" "
0 0 4 3 5 #"input"
0 0 4 3 1 #" "
0 0 4 3 2 #"to"
0 0 4 3 6 #" parse"
0 0 4 3 1 #"\""
0 0 4 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"           ("
0 0 4 3 6 #"lambda"
0 0 4 3 5 #" () ("
0 0 4 3 9 #"parse-mod"
0 0 4 3 1 #" "
0 0 4 3 6 #"\"hello"
0 0 4 3 1 #"\""
0 0 4 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 68
#";;parses a function definition, from an s-expression, into a FunDefC"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 6 #"define"
0 0 4 3 2 #" ("
0 0 4 3 12 #"parse-fundef"
0 0 4 3 2 #" ["
0 0 4 3 1 #"s"
0 0 4 3 1 #" "
0 0 4 3 1 #":"
0 0 4 3 1 #" "
0 0 4 3 4 #"Sexp"
0 0 4 3 3 #"]) "
0 0 4 3 1 #":"
0 0 4 3 1 #" "
0 0 4 3 7 #"FunDefC"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"  ("
0 0 4 3 5 #"match"
0 0 4 3 1 #" "
0 0 4 3 1 #"s"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"    [("
0 0 4 3 4 #"list"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 2 #"fn"
0 0 4 3 2 #" ("
0 0 4 3 4 #"list"
0 0 4 3 2 #" ("
0 0 4 3 1 #"?"
0 0 4 3 1 #" "
0 0 4 3 7 #"symbol?"
0 0 4 3 1 #" "
0 0 4 3 4 #"name"
0 0 4 3 3 #") ("
0 0 4 3 1 #"?"
0 0 4 3 1 #" "
0 0 4 3 7 #"symbol?"
0 0 4 3 1 #" "
0 0 4 3 4 #"args"
0 0 4 3 2 #") "
0 0 4 3 3 #"..."
0 0 4 3 2 #") "
0 0 4 3 4 #"body"
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"     ("
0 0 4 3 7 #"FunDefC"
0 0 4 3 1 #" "
0 0 4 3 4 #"name"
0 0 4 3 2 #" ("
0 0 4 3 4 #"cast"
0 0 4 3 1 #" "
0 0 4 3 4 #"args"
0 0 4 3 2 #" ("
0 0 4 3 6 #"Listof"
0 0 4 3 1 #" "
0 0 4 3 6 #"Symbol"
0 0 4 3 4 #")) ("
0 0 4 3 9 #"parse-mod"
0 0 4 3 1 #" "
0 0 4 3 4 #"body"
0 0 4 3 3 #"))]"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"    ["
0 0 4 3 4 #"else"
0 0 4 3 2 #" ("
0 0 4 3 5 #"error"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 12 #"parse-fundef"
0 0 4 3 1 #" "
0 0 4 3 13 #"\"DXUQ invalid"
0 0 4 3 1 #" "
0 0 4 3 5 #"input"
0 0 4 3 1 #" "
0 0 4 3 2 #"to"
0 0 4 3 13 #" parse-fundef"
0 0 4 3 1 #"\""
0 0 4 3 4 #")]))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 12 #"check-equal?"
0 0 4 3 2 #" ("
0 0 4 3 12 #"parse-fundef"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 1 #"{"
0 0 4 3 2 #"fn"
0 0 4 3 2 #" {"
0 0 4 3 6 #"myfunc"
0 0 4 3 1 #" "
0 0 4 3 1 #"x"
0 0 4 3 1 #" "
0 0 4 3 1 #"y"
0 0 4 3 1 #" "
0 0 4 3 1 #"z"
0 0 4 3 3 #"} {"
0 0 4 3 1 #"+"
0 0 4 3 1 #" "
0 0 4 3 1 #"1"
0 0 4 3 1 #" "
0 0 4 3 1 #"x"
0 0 4 3 3 #"}})"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"              ("
0 0 4 3 7 #"FunDefC"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 6 #"myfunc"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 1 #"("
0 0 4 3 1 #"x"
0 0 4 3 1 #" "
0 0 4 3 1 #"y"
0 0 4 3 1 #" "
0 0 4 3 1 #"z"
0 0 4 3 3 #") ("
0 0 4 3 5 #"BinOp"
0 0 4 3 2 #" ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 1 #"1"
0 0 4 3 3 #") ("
0 0 4 3 3 #"IdC"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 1 #"x"
0 0 4 3 2 #") "
0 0 4 3 1 #"'"
0 0 4 3 1 #"+"
0 0 4 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 12 #"check-equal?"
0 0 4 3 2 #" ("
0 0 4 3 12 #"parse-fundef"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 1 #"{"
0 0 4 3 2 #"fn"
0 0 4 3 2 #" {"
0 0 4 3 6 #"myfunc"
0 0 4 3 2 #"} "
0 0 4 3 1 #"2"
0 0 4 3 2 #"})"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"              ("
0 0 4 3 7 #"FunDefC"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 6 #"myfunc"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 4 #"() ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 1 #"2"
0 0 4 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 9 #"check-exn"
0 0 4 3 2 #" ("
0 0 4 3 6 #"regexp"
0 0 4 3 2 #" ("
0 0 4 3 12 #"regexp-quote"
0 0 4 3 1 #" "
0 0 4 3 13 #"\"DXUQ invalid"
0 0 4 3 1 #" "
0 0 4 3 5 #"input"
0 0 4 3 1 #" "
0 0 4 3 2 #"to"
0 0 4 3 13 #" parse-fundef"
0 0 4 3 1 #"\""
0 0 4 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"           ("
0 0 4 3 6 #"lambda"
0 0 4 3 5 #" () ("
0 0 4 3 12 #"parse-fundef"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 1 #"("
0 0 4 3 1 #"+"
0 0 4 3 1 #" "
0 0 4 3 1 #"1"
0 0 4 3 1 #" "
0 0 4 3 1 #"4"
0 0 4 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 53 #";;parses a list a functions, given as an s-expression"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 6 #"define"
0 0 4 3 2 #" ("
0 0 4 3 10 #"parse-prog"
0 0 4 3 2 #" ["
0 0 4 3 1 #"s"
0 0 4 3 1 #" "
0 0 4 3 1 #":"
0 0 4 3 1 #" "
0 0 4 3 4 #"Sexp"
0 0 4 3 3 #"]) "
0 0 4 3 1 #":"
0 0 4 3 2 #" ("
0 0 4 3 6 #"Listof"
0 0 4 3 1 #" "
0 0 4 3 7 #"FunDefC"
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"  ("
0 0 4 3 5 #"match"
0 0 4 3 1 #" "
0 0 4 3 1 #"s"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"    [("
0 0 4 3 4 #"list"
0 0 4 3 1 #" "
0 0 4 3 4 #"funs"
0 0 4 3 1 #" "
0 0 4 3 3 #"..."
0 0 4 3 3 #") ("
0 0 4 3 3 #"map"
0 0 4 3 1 #" "
0 0 4 3 12 #"parse-fundef"
0 0 4 3 1 #" "
0 0 4 3 4 #"funs"
0 0 4 3 4 #")]))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 12 #"check-equal?"
0 0 4 3 2 #" ("
0 0 4 3 10 #"parse-prog"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 3 #"{})"
0 0 4 3 1 #"'"
0 0 4 3 3 #"())"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 12 #"check-equal?"
0 0 4 3 2 #" ("
0 0 4 3 10 #"parse-prog"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 2 #"{{"
0 0 4 3 2 #"fn"
0 0 4 3 2 #" {"
0 0 4 3 6 #"myfunc"
0 0 4 3 1 #" "
0 0 4 3 1 #"x"
0 0 4 3 1 #" "
0 0 4 3 1 #"y"
0 0 4 3 1 #" "
0 0 4 3 1 #"z"
0 0 4 3 3 #"} {"
0 0 4 3 1 #"+"
0 0 4 3 1 #" "
0 0 4 3 1 #"1"
0 0 4 3 1 #" "
0 0 4 3 1 #"x"
0 0 4 3 4 #"}}})"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"              ("
0 0 4 3 4 #"list"
0 0 4 3 2 #" ("
0 0 4 3 7 #"FunDefC"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 6 #"myfunc"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 1 #"("
0 0 4 3 1 #"x"
0 0 4 3 1 #" "
0 0 4 3 1 #"y"
0 0 4 3 1 #" "
0 0 4 3 1 #"z"
0 0 4 3 3 #") ("
0 0 4 3 5 #"BinOp"
0 0 4 3 2 #" ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 1 #"1"
0 0 4 3 3 #") ("
0 0 4 3 3 #"IdC"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 1 #"x"
0 0 4 3 2 #") "
0 0 4 3 1 #"'"
0 0 4 3 1 #"+"
0 0 4 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 12 #"check-equal?"
0 0 4 3 2 #" ("
0 0 4 3 10 #"parse-prog"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 2 #"{{"
0 0 4 3 2 #"fn"
0 0 4 3 2 #" {"
0 0 4 3 7 #"myfunc1"
0 0 4 3 1 #" "
0 0 4 3 1 #"x"
0 0 4 3 1 #" "
0 0 4 3 1 #"y"
0 0 4 3 1 #" "
0 0 4 3 1 #"z"
0 0 4 3 3 #"} {"
0 0 4 3 1 #"+"
0 0 4 3 1 #" "
0 0 4 3 1 #"1"
0 0 4 3 1 #" "
0 0 4 3 1 #"x"
0 0 4 3 2 #"}}"
0 0 4 29 1 #"\n"
0 0 4 3 29 #"                            {"
0 0 4 3 2 #"fn"
0 0 4 3 2 #" {"
0 0 4 3 7 #"myfunc2"
0 0 4 3 2 #"} "
0 0 4 3 1 #"1"
0 0 4 3 3 #"}})"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"              ("
0 0 4 3 4 #"list"
0 0 4 3 2 #" ("
0 0 4 3 7 #"FunDefC"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 7 #"myfunc1"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 1 #"("
0 0 4 3 1 #"x"
0 0 4 3 1 #" "
0 0 4 3 1 #"y"
0 0 4 3 1 #" "
0 0 4 3 1 #"z"
0 0 4 3 3 #") ("
0 0 4 3 5 #"BinOp"
0 0 4 3 2 #" ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 1 #"1"
0 0 4 3 3 #") ("
0 0 4 3 3 #"IdC"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 1 #"x"
0 0 4 3 2 #") "
0 0 4 3 1 #"'"
0 0 4 3 1 #"+"
0 0 4 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 21 #"                    ("
0 0 4 3 7 #"FunDefC"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 7 #"myfunc2"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 4 #"() ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 1 #"1"
0 0 4 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"; substitute"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 62
#";;substitutes an expression for a symbol in another expression"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 6 #"define"
0 0 4 3 2 #" ("
0 0 4 3 5 #"subst"
0 0 4 3 2 #" ["
0 0 4 3 4 #"what"
0 0 4 3 1 #" "
0 0 4 3 1 #":"
0 0 4 3 1 #" "
0 0 4 3 5 #"ExprC"
0 0 4 3 3 #"] ["
0 0 4 3 3 #"for"
0 0 4 3 1 #" "
0 0 4 3 1 #":"
0 0 4 3 1 #" "
0 0 4 3 6 #"Symbol"
0 0 4 3 3 #"] ["
0 0 4 3 2 #"in"
0 0 4 3 1 #" "
0 0 4 3 1 #":"
0 0 4 3 1 #" "
0 0 4 3 5 #"ExprC"
0 0 4 3 3 #"]) "
0 0 4 3 1 #":"
0 0 4 3 1 #" "
0 0 4 3 5 #"ExprC"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"  ("
0 0 4 3 5 #"match"
0 0 4 3 1 #" "
0 0 4 3 2 #"in"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"    [("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 1 #"n"
0 0 4 3 2 #") "
0 0 4 3 2 #"in"
0 0 4 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"    [("
0 0 4 3 3 #"IdC"
0 0 4 3 1 #" "
0 0 4 3 1 #"s"
0 0 4 3 3 #") ("
0 0 4 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"               [("
0 0 4 3 8 #"symbol=?"
0 0 4 3 1 #" "
0 0 4 3 1 #"s"
0 0 4 3 1 #" "
0 0 4 3 3 #"for"
0 0 4 3 2 #") "
0 0 4 3 4 #"what"
0 0 4 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"               ["
0 0 4 3 4 #"else"
0 0 4 3 1 #" "
0 0 4 3 2 #"in"
0 0 4 3 3 #"])]"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"    [("
0 0 4 3 4 #"AppC"
0 0 4 3 1 #" "
0 0 4 3 1 #"f"
0 0 4 3 1 #" "
0 0 4 3 4 #"args"
0 0 4 3 3 #") ("
0 0 4 3 4 #"AppC"
0 0 4 3 1 #" "
0 0 4 3 1 #"f"
0 0 4 3 2 #" ("
0 0 4 3 3 #"map"
0 0 4 3 2 #" ("
0 0 4 3 2 #"\316\273"
0 0 4 3 3 #" (["
0 0 4 3 3 #"arg"
0 0 4 3 1 #" "
0 0 4 3 1 #":"
0 0 4 3 1 #" "
0 0 4 3 5 #"ExprC"
0 0 4 3 4 #"]) ("
0 0 4 3 5 #"subst"
0 0 4 3 1 #" "
0 0 4 3 4 #"what"
0 0 4 3 1 #" "
0 0 4 3 3 #"for"
0 0 4 3 1 #" "
0 0 4 3 3 #"arg"
0 0 4 3 3 #")) "
0 0 4 3 4 #"args"
0 0 4 3 3 #"))]"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"    [("
0 0 4 3 5 #"BinOp"
0 0 4 3 1 #" "
0 0 4 3 1 #"l"
0 0 4 3 1 #" "
0 0 4 3 1 #"r"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 1 #"+"
0 0 4 3 3 #") ("
0 0 4 3 5 #"BinOp"
0 0 4 3 2 #" ("
0 0 4 3 5 #"subst"
0 0 4 3 1 #" "
0 0 4 3 4 #"what"
0 0 4 3 1 #" "
0 0 4 3 3 #"for"
0 0 4 3 1 #" "
0 0 4 3 1 #"l"
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 25 #"                        ("
0 0 4 3 5 #"subst"
0 0 4 3 1 #" "
0 0 4 3 4 #"what"
0 0 4 3 1 #" "
0 0 4 3 3 #"for"
0 0 4 3 1 #" "
0 0 4 3 1 #"r"
0 0 4 3 2 #") "
0 0 4 3 1 #"'"
0 0 4 3 1 #"+"
0 0 4 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"    [("
0 0 4 3 5 #"BinOp"
0 0 4 3 1 #" "
0 0 4 3 1 #"l"
0 0 4 3 1 #" "
0 0 4 3 1 #"r"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 1 #"*"
0 0 4 3 3 #") ("
0 0 4 3 5 #"BinOp"
0 0 4 3 2 #" ("
0 0 4 3 5 #"subst"
0 0 4 3 1 #" "
0 0 4 3 4 #"what"
0 0 4 3 1 #" "
0 0 4 3 3 #"for"
0 0 4 3 1 #" "
0 0 4 3 1 #"l"
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 25 #"                        ("
0 0 4 3 5 #"subst"
0 0 4 3 1 #" "
0 0 4 3 4 #"what"
0 0 4 3 1 #" "
0 0 4 3 3 #"for"
0 0 4 3 1 #" "
0 0 4 3 1 #"r"
0 0 4 3 2 #") "
0 0 4 3 1 #"'"
0 0 4 3 1 #"*"
0 0 4 3 4 #")]))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 12 #"check-equal?"
0 0 4 3 2 #" ("
0 0 4 3 5 #"subst"
0 0 4 3 2 #" ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 1 #"4"
0 0 4 3 2 #") "
0 0 4 3 1 #"'"
0 0 4 3 1 #"x"
0 0 4 3 2 #" ("
0 0 4 3 5 #"BinOp"
0 0 4 3 2 #" ("
0 0 4 3 3 #"IdC"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 1 #"x"
0 0 4 3 3 #") ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 1 #"1"
0 0 4 3 2 #") "
0 0 4 3 1 #"'"
0 0 4 3 1 #"+"
0 0 4 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"              ("
0 0 4 3 5 #"BinOp"
0 0 4 3 2 #" ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 1 #"4"
0 0 4 3 3 #") ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 1 #"1"
0 0 4 3 2 #") "
0 0 4 3 1 #"'"
0 0 4 3 1 #"+"
0 0 4 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 12 #"check-equal?"
0 0 4 3 2 #" ("
0 0 4 3 5 #"subst"
0 0 4 3 2 #" ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 1 #"4"
0 0 4 3 2 #") "
0 0 4 3 1 #"'"
0 0 4 3 1 #"x"
0 0 4 3 2 #" ("
0 0 4 3 4 #"AppC"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 4 #"func"
0 0 4 3 2 #" ("
0 0 4 3 4 #"list"
0 0 4 3 2 #" ("
0 0 4 3 3 #"IdC"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 1 #"x"
0 0 4 3 3 #") ("
0 0 4 3 5 #"BinOp"
0 0 4 3 2 #" ("
0 0 4 3 3 #"IdC"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 1 #"x"
0 0 4 3 3 #") ("
0 0 4 3 3 #"IdC"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 1 #"y"
0 0 4 3 2 #") "
0 0 4 3 1 #"'"
0 0 4 3 1 #"*"
0 0 4 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"              ("
0 0 4 3 4 #"AppC"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 4 #"func"
0 0 4 3 2 #" ("
0 0 4 3 4 #"list"
0 0 4 3 2 #" ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 1 #"4"
0 0 4 3 3 #") ("
0 0 4 3 5 #"BinOp"
0 0 4 3 2 #" ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 1 #"4"
0 0 4 3 3 #") ("
0 0 4 3 3 #"IdC"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 1 #"y"
0 0 4 3 2 #") "
0 0 4 3 1 #"'"
0 0 4 3 1 #"*"
0 0 4 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 71
(5
 #";;calls subst for each argument in 'what', handling multi-arg functi"
 #"ons"
) 0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 6 #"define"
0 0 4 3 2 #" ("
0 0 4 3 10 #"subst-args"
0 0 4 3 2 #" ["
0 0 4 3 4 #"args"
0 0 4 3 1 #" "
0 0 4 3 1 #":"
0 0 4 3 2 #" ("
0 0 4 3 6 #"Listof"
0 0 4 3 1 #" "
0 0 4 3 5 #"ExprC"
0 0 4 3 4 #")] ["
0 0 4 3 6 #"params"
0 0 4 3 1 #" "
0 0 4 3 1 #":"
0 0 4 3 2 #" ("
0 0 4 3 6 #"Listof"
0 0 4 3 1 #" "
0 0 4 3 6 #"Symbol"
0 0 4 3 4 #")] ["
0 0 4 3 2 #"in"
0 0 4 3 1 #" "
0 0 4 3 1 #":"
0 0 4 3 1 #" "
0 0 4 3 5 #"ExprC"
0 0 4 3 3 #"]) "
0 0 4 3 1 #":"
0 0 4 3 1 #" "
0 0 4 3 5 #"ExprC"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"  ("
0 0 4 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"    [("
0 0 4 3 6 #"empty?"
0 0 4 3 1 #" "
0 0 4 3 4 #"args"
0 0 4 3 2 #") "
0 0 4 3 2 #"in"
0 0 4 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"    ["
0 0 4 3 4 #"else"
0 0 4 3 2 #" ("
0 0 4 3 10 #"subst-args"
0 0 4 3 2 #" ("
0 0 4 3 4 #"rest"
0 0 4 3 1 #" "
0 0 4 3 4 #"args"
0 0 4 3 3 #") ("
0 0 4 3 4 #"rest"
0 0 4 3 1 #" "
0 0 4 3 6 #"params"
0 0 4 3 3 #") ("
0 0 4 3 5 #"subst"
0 0 4 3 2 #" ("
0 0 4 3 5 #"first"
0 0 4 3 1 #" "
0 0 4 3 4 #"args"
0 0 4 3 3 #") ("
0 0 4 3 5 #"first"
0 0 4 3 1 #" "
0 0 4 3 6 #"params"
0 0 4 3 2 #") "
0 0 4 3 2 #"in"
0 0 4 3 5 #"))]))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 12 #"check-equal?"
0 0 4 3 2 #" ("
0 0 4 3 10 #"subst-args"
0 0 4 3 2 #" ("
0 0 4 3 4 #"list"
0 0 4 3 2 #" ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 1 #"4"
0 0 4 3 3 #") ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 1 #"8"
0 0 4 3 3 #")) "
0 0 4 3 1 #"'"
0 0 4 3 1 #"("
0 0 4 3 1 #"x"
0 0 4 3 1 #" "
0 0 4 3 1 #"y"
0 0 4 3 3 #") ("
0 0 4 3 5 #"BinOp"
0 0 4 3 2 #" ("
0 0 4 3 3 #"IdC"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 1 #"x"
0 0 4 3 3 #") ("
0 0 4 3 3 #"IdC"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 1 #"y"
0 0 4 3 2 #") "
0 0 4 3 1 #"'"
0 0 4 3 1 #"+"
0 0 4 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"              ("
0 0 4 3 5 #"BinOp"
0 0 4 3 2 #" ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 1 #"4"
0 0 4 3 3 #") ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 1 #"8"
0 0 4 3 2 #") "
0 0 4 3 1 #"'"
0 0 4 3 1 #"+"
0 0 4 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 69
(6
 #";;gets a function definition from a list of FunDefC's, given its nam"
 #"e"
) 0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 6 #"define"
0 0 4 3 2 #" ("
0 0 4 3 10 #"get-fundef"
0 0 4 3 2 #" ["
0 0 4 3 1 #"n"
0 0 4 3 1 #" "
0 0 4 3 1 #":"
0 0 4 3 1 #" "
0 0 4 3 6 #"Symbol"
0 0 4 3 3 #"] ["
0 0 4 3 3 #"fds"
0 0 4 3 1 #" "
0 0 4 3 1 #":"
0 0 4 3 2 #" ("
0 0 4 3 6 #"Listof"
0 0 4 3 1 #" "
0 0 4 3 7 #"FunDefC"
0 0 4 3 4 #")]) "
0 0 4 3 1 #":"
0 0 4 3 1 #" "
0 0 4 3 7 #"FunDefC"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"    ("
0 0 4 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"      [("
0 0 4 3 6 #"empty?"
0 0 4 3 1 #" "
0 0 4 3 3 #"fds"
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"       ("
0 0 4 3 5 #"error"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 10 #"get-fundef"
0 0 4 3 1 #" "
0 0 4 3 15 #"\"DXUQ reference"
0 0 4 3 1 #" "
0 0 4 3 2 #"to"
0 0 4 3 1 #" "
0 0 4 3 9 #"undefined"
0 0 4 3 9 #" function"
0 0 4 3 1 #"\""
0 0 4 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"      [("
0 0 4 3 5 #"cons?"
0 0 4 3 1 #" "
0 0 4 3 3 #"fds"
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"       ("
0 0 4 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"         [("
0 0 4 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 4 3 1 #"n"
0 0 4 3 2 #" ("
0 0 4 3 12 #"FunDefC-name"
0 0 4 3 2 #" ("
0 0 4 3 5 #"first"
0 0 4 3 1 #" "
0 0 4 3 3 #"fds"
0 0 4 3 5 #"))) ("
0 0 4 3 5 #"first"
0 0 4 3 1 #" "
0 0 4 3 3 #"fds"
0 0 4 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"         ["
0 0 4 3 4 #"else"
0 0 4 3 2 #" ("
0 0 4 3 10 #"get-fundef"
0 0 4 3 1 #" "
0 0 4 3 1 #"n"
0 0 4 3 2 #" ("
0 0 4 3 4 #"rest"
0 0 4 3 1 #" "
0 0 4 3 3 #"fds"
0 0 4 3 7 #"))])]))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 12 #"check-equal?"
0 0 4 3 2 #" ("
0 0 4 3 10 #"get-fundef"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 5 #"func1"
0 0 4 3 2 #" ("
0 0 4 3 4 #"list"
0 0 4 3 2 #" ("
0 0 4 3 7 #"FunDefC"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 5 #"func2"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 1 #"("
0 0 4 3 1 #"x"
0 0 4 3 3 #") ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 1 #"4"
0 0 4 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 40 #"                                       ("
0 0 4 3 7 #"FunDefC"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 5 #"func1"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 1 #"("
0 0 4 3 1 #"x"
0 0 4 3 3 #") ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 1 #"5"
0 0 4 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"              ("
0 0 4 3 7 #"FunDefC"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 5 #"func1"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 1 #"("
0 0 4 3 1 #"x"
0 0 4 3 3 #") ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 1 #"5"
0 0 4 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 9 #"check-exn"
0 0 4 3 2 #" ("
0 0 4 3 6 #"regexp"
0 0 4 3 2 #" ("
0 0 4 3 12 #"regexp-quote"
0 0 4 3 1 #" "
0 0 4 3 27 #"\"get-fundef: DXUQ reference"
0 0 4 3 1 #" "
0 0 4 3 2 #"to"
0 0 4 3 1 #" "
0 0 4 3 9 #"undefined"
0 0 4 3 1 #" "
0 0 4 3 9 #"function\""
0 0 4 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"           ("
0 0 4 3 6 #"lambda"
0 0 4 3 5 #" () ("
0 0 4 3 10 #"get-fundef"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 4 #"func"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 5 #"())))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"; interp"
0 0 4 29 1 #"\n"
0 0 4 3 31 #";;evaluates an ExprC to a value"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 6 #"define"
0 0 4 3 2 #" ("
0 0 4 3 6 #"interp"
0 0 4 3 2 #" ["
0 0 4 3 1 #"a"
0 0 4 3 1 #" "
0 0 4 3 1 #":"
0 0 4 3 1 #" "
0 0 4 3 5 #"ExprC"
0 0 4 3 3 #"] ["
0 0 4 3 3 #"fds"
0 0 4 3 1 #" "
0 0 4 3 1 #":"
0 0 4 3 2 #" ("
0 0 4 3 6 #"Listof"
0 0 4 3 1 #" "
0 0 4 3 7 #"FunDefC"
0 0 4 3 4 #")]) "
0 0 4 3 1 #":"
0 0 4 3 1 #" "
0 0 4 3 4 #"Real"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"    ("
0 0 4 3 5 #"match"
0 0 4 3 1 #" "
0 0 4 3 1 #"a"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"      [("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 1 #"n"
0 0 4 3 2 #") "
0 0 4 3 1 #"n"
0 0 4 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"      [("
0 0 4 3 5 #"BinOp"
0 0 4 3 1 #" "
0 0 4 3 1 #"l"
0 0 4 3 1 #" "
0 0 4 3 1 #"r"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 1 #"+"
0 0 4 3 3 #") ("
0 0 4 3 1 #"+"
0 0 4 3 2 #" ("
0 0 4 3 6 #"interp"
0 0 4 3 1 #" "
0 0 4 3 1 #"l"
0 0 4 3 1 #" "
0 0 4 3 3 #"fds"
0 0 4 3 3 #") ("
0 0 4 3 6 #"interp"
0 0 4 3 1 #" "
0 0 4 3 1 #"r"
0 0 4 3 1 #" "
0 0 4 3 3 #"fds"
0 0 4 3 3 #"))]"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"      [("
0 0 4 3 5 #"BinOp"
0 0 4 3 2 #"  "
0 0 4 3 1 #"l"
0 0 4 3 1 #" "
0 0 4 3 1 #"r"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 1 #"*"
0 0 4 3 3 #") ("
0 0 4 3 1 #"*"
0 0 4 3 2 #" ("
0 0 4 3 6 #"interp"
0 0 4 3 1 #" "
0 0 4 3 1 #"l"
0 0 4 3 1 #" "
0 0 4 3 3 #"fds"
0 0 4 3 3 #") ("
0 0 4 3 6 #"interp"
0 0 4 3 1 #" "
0 0 4 3 1 #"r"
0 0 4 3 1 #" "
0 0 4 3 3 #"fds"
0 0 4 3 3 #"))]"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"      [("
0 0 4 3 5 #"BinOp"
0 0 4 3 1 #" "
0 0 4 3 1 #"l"
0 0 4 3 1 #" "
0 0 4 3 1 #"r"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 1 #"/"
0 0 4 3 3 #") ("
0 0 4 3 1 #"/"
0 0 4 3 2 #" ("
0 0 4 3 6 #"interp"
0 0 4 3 1 #" "
0 0 4 3 1 #"l"
0 0 4 3 1 #" "
0 0 4 3 3 #"fds"
0 0 4 3 3 #") ("
0 0 4 3 5 #"match"
0 0 4 3 2 #" ("
0 0 4 3 6 #"interp"
0 0 4 3 1 #" "
0 0 4 3 1 #"r"
0 0 4 3 1 #" "
0 0 4 3 3 #"fds"
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 43 #"                                          ["
0 0 4 3 1 #"0"
0 0 4 3 2 #" ("
0 0 4 3 5 #"error"
0 0 4 3 1 #" "
0 0 4 3 28 #"\"DXUQ Cannot divide by Zero\""
0 0 4 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 44 #"                                          [("
0 0 4 3 1 #"?"
0 0 4 3 1 #" "
0 0 4 3 5 #"real?"
0 0 4 3 1 #" "
0 0 4 3 1 #"r"
0 0 4 3 2 #") "
0 0 4 3 1 #"r"
0 0 4 3 4 #"]))]"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"      [("
0 0 4 3 4 #"AppC"
0 0 4 3 1 #" "
0 0 4 3 1 #"f"
0 0 4 3 1 #" "
0 0 4 3 4 #"args"
0 0 4 3 3 #") ("
0 0 4 3 6 #"define"
0 0 4 3 1 #" "
0 0 4 3 2 #"fd"
0 0 4 3 2 #" ("
0 0 4 3 10 #"get-fundef"
0 0 4 3 1 #" "
0 0 4 3 1 #"f"
0 0 4 3 1 #" "
0 0 4 3 3 #"fds"
0 0 4 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 19 #"                  ("
0 0 4 3 6 #"interp"
0 0 4 3 2 #" ("
0 0 4 3 10 #"subst-args"
0 0 4 3 1 #" "
0 0 4 3 4 #"args"
0 0 4 3 2 #" ("
0 0 4 3 12 #"FunDefC-args"
0 0 4 3 1 #" "
0 0 4 3 2 #"fd"
0 0 4 3 3 #") ("
0 0 4 3 12 #"FunDefC-body"
0 0 4 3 1 #" "
0 0 4 3 2 #"fd"
0 0 4 3 3 #")) "
0 0 4 3 3 #"fds"
0 0 4 3 4 #")]))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 7 #"check-="
0 0 4 3 2 #" ("
0 0 4 3 6 #"interp"
0 0 4 3 2 #" ("
0 0 4 3 5 #"BinOp"
0 0 4 3 2 #" ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 2 #"10"
0 0 4 3 3 #") ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 1 #"2"
0 0 4 3 2 #") "
0 0 4 3 1 #"'"
0 0 4 3 1 #"/"
0 0 4 3 2 #") "
0 0 4 3 1 #"'"
0 0 4 3 4 #"()) "
0 0 4 3 1 #"5"
0 0 4 3 1 #" "
0 0 4 3 7 #"EPSILON"
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 9 #"check-exn"
0 0 4 3 2 #" ("
0 0 4 3 6 #"regexp"
0 0 4 3 2 #" ("
0 0 4 3 12 #"regexp-quote"
0 0 4 3 1 #" "
0 0 4 3 28 #"\"DXUQ Cannot divide by Zero\""
0 0 4 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"           ("
0 0 4 3 6 #"lambda"
0 0 4 3 5 #" () ("
0 0 4 3 6 #"interp"
0 0 4 3 2 #" ("
0 0 4 3 5 #"BinOp"
0 0 4 3 2 #" ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 2 #"10"
0 0 4 3 3 #") ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 1 #"0"
0 0 4 3 2 #") "
0 0 4 3 1 #"'"
0 0 4 3 1 #"/"
0 0 4 3 2 #") "
0 0 4 3 1 #"'"
0 0 4 3 5 #"())))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 7 #"check-="
0 0 4 3 2 #" ("
0 0 4 3 6 #"interp"
0 0 4 3 2 #" ("
0 0 4 3 5 #"BinOp"
0 0 4 3 2 #" ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 1 #"4"
0 0 4 3 3 #") ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 1 #"5"
0 0 4 3 2 #") "
0 0 4 3 1 #"'"
0 0 4 3 1 #"+"
0 0 4 3 2 #") "
0 0 4 3 1 #"'"
0 0 4 3 4 #"()) "
0 0 4 3 1 #"9"
0 0 4 3 1 #" "
0 0 4 3 7 #"EPSILON"
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 7 #"check-="
0 0 4 3 2 #" ("
0 0 4 3 6 #"interp"
0 0 4 3 2 #" ("
0 0 4 3 5 #"BinOp"
0 0 4 3 2 #" ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 1 #"4"
0 0 4 3 3 #") ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 1 #"5"
0 0 4 3 2 #") "
0 0 4 3 1 #"'"
0 0 4 3 1 #"*"
0 0 4 3 2 #") "
0 0 4 3 1 #"'"
0 0 4 3 4 #"()) "
0 0 4 3 2 #"20"
0 0 4 3 1 #" "
0 0 4 3 7 #"EPSILON"
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 7 #"check-="
0 0 4 3 2 #" ("
0 0 4 3 6 #"interp"
0 0 4 3 2 #" ("
0 0 4 3 5 #"BinOp"
0 0 4 3 2 #" ("
0 0 4 3 5 #"BinOp"
0 0 4 3 2 #" ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 1 #"3"
0 0 4 3 3 #") ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 1 #"2"
0 0 4 3 2 #") "
0 0 4 3 1 #"'"
0 0 4 3 1 #"*"
0 0 4 3 3 #") ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 1 #"5"
0 0 4 3 2 #") "
0 0 4 3 1 #"'"
0 0 4 3 1 #"+"
0 0 4 3 2 #") "
0 0 4 3 1 #"'"
0 0 4 3 4 #"()) "
0 0 4 3 2 #"11"
0 0 4 3 1 #" "
0 0 4 3 7 #"EPSILON"
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 7 #"check-="
0 0 4 3 2 #" ("
0 0 4 3 6 #"interp"
0 0 4 3 2 #" ("
0 0 4 3 4 #"AppC"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 4 #"func"
0 0 4 3 2 #" ("
0 0 4 3 4 #"list"
0 0 4 3 2 #" ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 2 #"10"
0 0 4 3 3 #") ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 1 #"5"
0 0 4 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                 ("
0 0 4 3 4 #"list"
0 0 4 3 2 #" ("
0 0 4 3 7 #"FunDefC"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 4 #"func"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 1 #"("
0 0 4 3 1 #"x"
0 0 4 3 1 #" "
0 0 4 3 1 #"y"
0 0 4 3 3 #") ("
0 0 4 3 5 #"BinOp"
0 0 4 3 2 #" ("
0 0 4 3 3 #"IdC"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 1 #"x"
0 0 4 3 3 #") ("
0 0 4 3 3 #"IdC"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 1 #"y"
0 0 4 3 2 #") "
0 0 4 3 1 #"'"
0 0 4 3 1 #"+"
0 0 4 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 4 3 2 #"15"
0 0 4 3 1 #" "
0 0 4 3 7 #"EPSILON"
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 59
#";;intreprets the 'main' function, given a list of functions"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 6 #"define"
0 0 4 3 2 #" ("
0 0 4 3 10 #"interp-fns"
0 0 4 3 2 #" ["
0 0 4 3 4 #"funs"
0 0 4 3 1 #" "
0 0 4 3 1 #":"
0 0 4 3 2 #" ("
0 0 4 3 6 #"Listof"
0 0 4 3 1 #" "
0 0 4 3 7 #"FunDefC"
0 0 4 3 4 #")]) "
0 0 4 3 1 #":"
0 0 4 3 1 #" "
0 0 4 3 4 #"Real"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"  ("
0 0 4 3 6 #"interp"
0 0 4 3 2 #" ("
0 0 4 3 12 #"FunDefC-body"
0 0 4 3 2 #" ("
0 0 4 3 10 #"get-fundef"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 4 #"main"
0 0 4 3 1 #" "
0 0 4 3 4 #"funs"
0 0 4 3 3 #")) "
0 0 4 3 4 #"funs"
0 0 4 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 12 #"check-equal?"
0 0 4 3 2 #" ("
0 0 4 3 10 #"interp-fns"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"               ("
0 0 4 3 4 #"list"
0 0 4 3 2 #" ("
0 0 4 3 7 #"FunDefC"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 4 #"func"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 1 #"("
0 0 4 3 1 #"x"
0 0 4 3 3 #") ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 1 #"4"
0 0 4 3 4 #")) ("
0 0 4 3 7 #"FunDefC"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 4 #"main"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 1 #"("
0 0 4 3 1 #"x"
0 0 4 3 3 #") ("
0 0 4 3 4 #"NumC"
0 0 4 3 1 #" "
0 0 4 3 1 #"5"
0 0 4 3 4 #"))))"
0 0 4 3 1 #"5"
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 12 #"check-equal?"
0 0 4 3 2 #" ("
0 0 4 3 10 #"interp-fns"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"       ("
0 0 4 3 10 #"parse-prog"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 2 #"{{"
0 0 4 3 2 #"fn"
0 0 4 3 2 #" {"
0 0 4 3 1 #"f"
0 0 4 3 1 #" "
0 0 4 3 1 #"x"
0 0 4 3 1 #" "
0 0 4 3 1 #"y"
0 0 4 3 3 #"} {"
0 0 4 3 1 #"+"
0 0 4 3 1 #" "
0 0 4 3 1 #"x"
0 0 4 3 1 #" "
0 0 4 3 1 #"y"
0 0 4 3 2 #"}}"
0 0 4 29 1 #"\n"
0 0 4 3 22 #"                     {"
0 0 4 3 2 #"fn"
0 0 4 3 2 #" {"
0 0 4 3 4 #"main"
0 0 4 3 3 #"} {"
0 0 4 3 1 #"f"
0 0 4 3 1 #" "
0 0 4 3 1 #"1"
0 0 4 3 1 #" "
0 0 4 3 1 #"2"
0 0 4 3 6 #"}}})) "
0 0 4 3 1 #"3"
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 12 #"check-equal?"
0 0 4 3 2 #" ("
0 0 4 3 10 #"interp-fns"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"        ("
0 0 4 3 10 #"parse-prog"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 2 #"{{"
0 0 4 3 2 #"fn"
0 0 4 3 2 #" {"
0 0 4 3 1 #"f"
0 0 4 3 2 #"} "
0 0 4 3 1 #"5"
0 0 4 3 1 #"}"
0 0 4 29 1 #"\n"
0 0 4 3 23 #"                      {"
0 0 4 3 2 #"fn"
0 0 4 3 2 #" {"
0 0 4 3 4 #"main"
0 0 4 3 3 #"} {"
0 0 4 3 1 #"+"
0 0 4 3 2 #" {"
0 0 4 3 1 #"f"
0 0 4 3 3 #"} {"
0 0 4 3 1 #"f"
0 0 4 3 6 #"}}}}))"
0 0 4 3 2 #"10"
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 30 #";;interperates an S-expression"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 6 #"define"
0 0 4 3 2 #" ("
0 0 4 3 10 #"top-interp"
0 0 4 3 2 #" ["
0 0 4 3 9 #"fun-sexps"
0 0 4 3 1 #" "
0 0 4 3 1 #":"
0 0 4 3 1 #" "
0 0 4 3 4 #"Sexp"
0 0 4 3 3 #"]) "
0 0 4 3 1 #":"
0 0 4 3 1 #" "
0 0 4 3 4 #"Real"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"  ("
0 0 4 3 10 #"interp-fns"
0 0 4 3 2 #" ("
0 0 4 3 10 #"parse-prog"
0 0 4 3 1 #" "
0 0 4 3 9 #"fun-sexps"
0 0 4 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 12 #"check-equal?"
0 0 4 3 2 #" ("
0 0 4 3 10 #"top-interp"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 2 #"{{"
0 0 4 3 2 #"fn"
0 0 4 3 2 #" {"
0 0 4 3 1 #"f"
0 0 4 3 1 #" "
0 0 4 3 1 #"x"
0 0 4 3 1 #" "
0 0 4 3 1 #"y"
0 0 4 3 3 #"} {"
0 0 4 3 1 #"+"
0 0 4 3 1 #" "
0 0 4 3 1 #"x"
0 0 4 3 1 #" "
0 0 4 3 1 #"y"
0 0 4 3 2 #"}}"
0 0 4 29 1 #"\n"
0 0 4 3 29 #"                            {"
0 0 4 3 2 #"fn"
0 0 4 3 2 #" {"
0 0 4 3 4 #"main"
0 0 4 3 3 #"} {"
0 0 4 3 1 #"f"
0 0 4 3 1 #" "
0 0 4 3 1 #"1"
0 0 4 3 1 #" "
0 0 4 3 1 #"2"
0 0 4 3 5 #"}}}) "
0 0 4 3 1 #"3"
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 12 #"check-equal?"
0 0 4 3 2 #" ("
0 0 4 3 10 #"top-interp"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 2 #"{{"
0 0 4 3 2 #"fn"
0 0 4 3 2 #" {"
0 0 4 3 1 #"f"
0 0 4 3 2 #"} "
0 0 4 3 1 #"5"
0 0 4 3 1 #"}"
0 0 4 29 1 #"\n"
0 0 4 3 29 #"                            {"
0 0 4 3 2 #"fn"
0 0 4 3 2 #" {"
0 0 4 3 4 #"main"
0 0 4 3 3 #"} {"
0 0 4 3 1 #"+"
0 0 4 3 2 #" {"
0 0 4 3 1 #"f"
0 0 4 3 3 #"} {"
0 0 4 3 1 #"f"
0 0 4 3 5 #"}}}})"
0 0 4 3 2 #"10"
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 12 #"check-equal?"
0 0 4 3 2 #" ("
0 0 4 3 10 #"top-interp"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 2 #"{{"
0 0 4 3 2 #"fn"
0 0 4 3 2 #" {"
0 0 4 3 1 #"u"
0 0 4 3 1 #" "
0 0 4 3 1 #"x"
0 0 4 3 3 #"} {"
0 0 4 3 1 #"-"
0 0 4 3 1 #" "
0 0 4 3 1 #"x"
0 0 4 3 2 #"}}"
0 0 4 29 1 #"\n"
0 0 4 3 29 #"                            {"
0 0 4 3 2 #"fn"
0 0 4 3 2 #" {"
0 0 4 3 1 #"f"
0 0 4 3 1 #" "
0 0 4 3 1 #"x"
0 0 4 3 1 #" "
0 0 4 3 1 #"y"
0 0 4 3 3 #"} {"
0 0 4 3 1 #"*"
0 0 4 3 1 #" "
0 0 4 3 1 #"x"
0 0 4 3 1 #" "
0 0 4 3 1 #"y"
0 0 4 3 2 #"}}"
0 0 4 29 1 #"\n"
0 0 4 3 29 #"                            {"
0 0 4 3 2 #"fn"
0 0 4 3 2 #" {"
0 0 4 3 4 #"main"
0 0 4 3 3 #"} {"
0 0 4 3 1 #"+"
0 0 4 3 2 #" {"
0 0 4 3 1 #"f"
0 0 4 3 1 #" "
0 0 4 3 1 #"6"
0 0 4 3 1 #" "
0 0 4 3 1 #"4"
0 0 4 3 3 #"} {"
0 0 4 3 1 #"u"
0 0 4 3 1 #" "
0 0 4 3 1 #"4"
0 0 4 3 5 #"}}}})"
0 0 4 3 2 #"20"
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 12 #"check-equal?"
0 0 4 3 2 #" ("
0 0 4 3 10 #"top-interp"
0 0 4 3 1 #" "
0 0 4 3 1 #"'"
0 0 4 3 2 #"{{"
0 0 4 3 2 #"fn"
0 0 4 3 2 #" {"
0 0 4 3 1 #"u"
0 0 4 3 1 #" "
0 0 4 3 1 #"x"
0 0 4 3 3 #"} {"
0 0 4 3 1 #"-"
0 0 4 3 1 #" "
0 0 4 3 1 #"x"
0 0 4 3 2 #"}}"
0 0 4 29 1 #"\n"
0 0 4 3 29 #"                            {"
0 0 4 3 2 #"fn"
0 0 4 3 2 #" {"
0 0 4 3 1 #"f"
0 0 4 3 1 #" "
0 0 4 3 1 #"x"
0 0 4 3 1 #" "
0 0 4 3 1 #"y"
0 0 4 3 3 #"} {"
0 0 4 3 1 #"*"
0 0 4 3 1 #" "
0 0 4 3 1 #"x"
0 0 4 3 1 #" "
0 0 4 3 1 #"y"
0 0 4 3 2 #"}}"
0 0 4 29 1 #"\n"
0 0 4 3 29 #"                            {"
0 0 4 3 2 #"fn"
0 0 4 3 2 #" {"
0 0 4 3 4 #"main"
0 0 4 3 3 #"} {"
0 0 4 3 1 #"+"
0 0 4 3 2 #" {"
0 0 4 3 1 #"f"
0 0 4 3 1 #" "
0 0 4 3 1 #"6"
0 0 4 3 1 #" "
0 0 4 3 1 #"4"
0 0 4 3 3 #"} {"
0 0 4 3 1 #"u"
0 0 4 3 2 #" {"
0 0 4 3 1 #"-"
0 0 4 3 1 #" "
0 0 4 3 1 #"6"
0 0 4 3 6 #"}}}}})"
0 0 4 3 2 #"30"
0 0 4 3 1 #")"
0           0
